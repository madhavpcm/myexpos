// Device Manager
alias funcNo R1;
alias currPID R2;
alias wordOut R3;
alias retVal R5;

//DISK STORE
if( funcNo == 1) then
  //do f1
  R0=-1;
  return;
endif;

//DISK LOAD
if ( funcNo == 2) then
//do f2
  R0=-1;
  return;
endif;

//TERMINAL WRITE
if( funcNo == TERMINAL_WRITE) then
  //acquire terminal
  multipush(R0,R1,R2,R3);

  funcNo=ACQUIRE_TERMINAL;
  currPID=[SYSTEM_STATUS_TABLE + 1];
  call MOD_0;

  multipop(R0,R1,R2,R3);

  print R3;

  multipush(R0,R1,R2,R3);

  funcNo=RELEASE_TERMINAL;
  currPID=[SYSTEM_STATUS_TABLE + 1];
  call MOD_0;

  multipop(R0,R1,R2,R3);
  return;

endif;
//TERMINAL READ
if( funcNo == TERMINAL_READ) then
  //Acquire terminal
  multipush(R0,R1,R2,R3);

  funcNo=ACQUIRE_TERMINAL;
  currPID=[SYSTEM_STATUS_TABLE + 1];
  call MOD_0;

  multipop(R0,R1,R2,R3);

  read;

  //set process to wait_terminal
  [PROCESS_TABLE + currPID*16 + 4] = WAIT_TERMINAL;

  //call scheduler
  multipush(R0,R1,R2,R3);

  call SCHEDULER;

  multipop(R0,R1,R2,R3);

  alias word R5;
  word = ([PTBR + (R3)*2/512])*512 + (R3)%512;
  [word] = [PROCESS_TABLE + currPID * 16 + 8];

  return;
  

endif;//error

R0=-1;
return;
