//Boot Module 
//ex-handler
loadi(2,15);
loadi(3,16);

//library
loadi(63,13);
loadi(64,14);

//Init
loadi(65,7);
loadi(66,8);

//Idle
loadi(69,11);
loadi(70,12);

//INT=1; timer interrupt
loadi(4,17);
loadi(5,18);

//INT=2 disk interrupt
loadi(6,19);
loadi(7,20);

//INT=3; terminal interrupt handler
loadi(8,21);
loadi(9,22);

//INT=6; read
loadi(14,27);
loadi(15,28);

//INT=7; write
loadi(16,29);
loadi(17,30);

//INT=8; fork
loadi(18,31);
loadi(19,32);

//INT=9; exec
loadi(20,33);
loadi(21,34);

//INT=10; exit
loadi(22,35);
loadi(23,36);

//MOD_0 : Resource Manager Module
loadi(40, 53);
loadi(41, 54);

//MOD_1 : Process Manager Module
loadi(42, 55);
loadi(43, 56);

//MOD_2 : Memory Manager Module
loadi(44, 57);
loadi(45, 58);

//MOD_4 : Device Manager Module
loadi(48, 61);
loadi(49, 62);

//MOD_5 : Context Switch Module
loadi(50,63);
loadi(51,64);

//inode + user table 
loadi(59, 3);
loadi(60, 4);

//user program 1
//83,84 - Heap
//85- Code
//86-87- Stack
//88 - UAP
loadi(85, 69);

//user program 2
//89-90 heap
//91 Code
//92-93 Stack
//94 UAP

PTBR=PAGE_TABLE_BASE+20;
PTLR=10;

//library
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";
//heap
[PTBR+4]=78;
[PTBR+5]="0110";
[PTBR+6]=79;
[PTBR+7]="0110";
//code
[PTBR+8]=65;
[PTBR+9]="0100";
[PTBR+10]=66;
[PTBR+11]="0100";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";
//stack
[PTBR+16]=76;
[PTBR+17]="0110";
[PTBR+18]=77;
[PTBR+19]="0110";
//init
alias init_process_table R6;
init_process_table = PROCESS_TABLE + 1*16;
[init_process_table + 1] = 1;
[init_process_table + 4] = CREATED;
[init_process_table + 11] = 80;
[init_process_table + 12] = 0;
[init_process_table + 13] = 8*512;
[init_process_table + 14] = PTBR;
[init_process_table + 15] = 10;
[76*512]=[65*512 + 1];

//Initalizing Disk Map table for Init process
alias init_disk_table R6;
init_disk_table = DISK_MAP_TABLE + 1*10;
[init_disk_table + 0] = -1; 
[init_disk_table + 1] = -1; 
[init_disk_table + 2] = -1; 
[init_disk_table + 3] = -1; 
[init_disk_table + 4] = 7; 
[init_disk_table + 5] = 8; 
[init_disk_table + 6] = -1; 
[init_disk_table + 7] = -1; 
[init_disk_table + 8] = -1; 
[init_disk_table + 9] = -1; 

//user p 1
PTBR=PAGE_TABLE_BASE+40;

//library
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";
//heap
[PTBR+4]=83;
[PTBR+5]="0110";
[PTBR+6]=84;
[PTBR+7]="0110";
//code
[PTBR+8]=85;
[PTBR+9]="0100";
[PTBR+10]=-1;
[PTBR+11]="0000";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";
//stack
[PTBR+16]=86;
[PTBR+17]="0110";
[PTBR+18]=87;
[PTBR+19]="0110";

alias up1_process_table R7;
up1_process_table= PROCESS_TABLE+2*16;
[up1_process_table + 1] = 2;
[up1_process_table + 4] = CREATED;
[up1_process_table + 11] = 88;
[up1_process_table + 12] = 0;
[up1_process_table + 13] = 8*512;
[up1_process_table + 14] = PTBR;
[up1_process_table + 15] = PTLR;
[86*512]=[85*512 + 1];


//set other process table statuses to terminated
[PROCESS_TABLE + 2*16 + 4] = TERMINATED;
[PROCESS_TABLE + 3*16 + 4] = TERMINATED;
[PROCESS_TABLE + 4*16 + 4] = TERMINATED;
[PROCESS_TABLE + 5*16 + 4] = TERMINATED;
[PROCESS_TABLE + 6*16 + 4] = TERMINATED;
[PROCESS_TABLE + 7*16 + 4] = TERMINATED;
[PROCESS_TABLE + 8*16 + 4] = TERMINATED;
[PROCESS_TABLE + 9*16 + 4] = TERMINATED;
[PROCESS_TABLE + 10*16 + 4] = TERMINATED;
[PROCESS_TABLE + 11*16 + 4] = TERMINATED;
[PROCESS_TABLE + 12*16 + 4] = TERMINATED;
[PROCESS_TABLE + 13*16 + 4] = TERMINATED;
[PROCESS_TABLE + 14*16 + 4] = TERMINATED;
[PROCESS_TABLE + 15*16 + 4] = TERMINATED;


//free pages and things
alias iter R0;
iter =0;
while(iter < 83) do
  [MEMORY_FREE_LIST + iter]  = 1;
  iter=iter+1;
endwhile;

//mem_free_count
[SYSTEM_STATUS_TABLE + 2] =0;

while(iter < 128) do
  [MEMORY_FREE_LIST + iter]  = 0;
  [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2]+1;
  iter=iter+1;
endwhile;

//wait_mem_count
[SYSTEM_STATUS_TABLE + 3] =0;

[TERMINAL_STATUS_TABLE] = 0;
[DISK_STATUS_TABLE]=0;
return;

