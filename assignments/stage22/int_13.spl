//Semget and Semrelease wrappers
alias cpid R1;
alias centry R2;
alias uptr R3;
alias syscall R4;

cpid=[SYSTEM_STATUS_TABLE + 1];
centry = PROCESS_TABLE + cpid*16;

//Switch Stacks
[centry + 13] = SP;
uptr = SP;
SP = [centry + 11]*512 -1;

//Extract Syscall
syscall = [[PTBR + (uptr-5)*2/512]*512 + (uptr-5)%512];
//sussy approach 
if(syscall == INT_SEMGET) then
  //Mode flag
  [centry + 9] = INT_SEMGET;
  alias rentry R6;  
  //get resource table from uap 
  rentry = [centry + 11]*512 + RESOURCE_TABLE_OFFSET;
  //loop thru it and find free entries
  while(rentry < [centry +11 ] * 512 + 512) do
    //if free entry
    if ([rentry] == -1)then
      //call acquire terminal function
      [rentry] = SEMAPHORE;
      multipush(R1,R2,R3,R4,R6);
      R2 = cpid;
      R1 = ACQUIRE_SEMAPHORE;
      call RESOURCE_MANAGER;
      multipop(R1,R2,R3,R4,R6);
      
      if(R0 == -1) then
        //No semaphore availabe
        [[PTBR + (uptr-1)*2/512]*512 + (uptr-1)%512] = -2;
      else
        //Got semaphore index 
        //Set this in the free entry
        [rentry+1] = R0;
        //setup return value
        //maybe sus once check
        [[PTBR + (uptr-1)*2/512]*512 + (uptr-1)%512] = R0;
      endif;
      //work here is done :)
      break;
    endif;
    //increment by 2
    rentry=rentry + 2;
  endwhile;
  //Nofree page in resource table
  [[PTBR + (uptr-1)*2/512]*512 + (uptr-1)%512] = -1;
endif;

if(syscall == INT_SEMRELEASE) then
  //Mode
  [centry + 9] = INT_SEMRELEASE;
  alias semid R6;
  alias rentry R7;  
  //Get argument 1 , i.e semid
  semid = [[PTBR + (uptr-4)*2/512]*512 + (uptr-4)%512];
  //get resource table from uap 
  rentry = [centry + 11]*512 + RESOURCE_TABLE_OFFSET;

  //Invalid case
  if( semid < 0 || semid > 7 || [rentry + semid*2] != SEMAPHORE) then
    //set return value to -1
    [[PTBR + (uptr-1)*2/512]*512 + (uptr-1)%512] = -1;
    //byebye
    [centry + 9] =0;
    //Switch stacks
    SP = [centry + 13];
    ireturn;
  endif;

  //Call resource manager module
  multipush(R1,R2,R3,R4,R5,R6,R7);
  R1=RELEASE_SEMAPHORE;
  R2=[SYSTEM_STATUS_TABLE + 1];
  R3=[rentry+2*semid+1];
  call RESOURCE_MANAGER;
  multipop(R1,R2,R3,R4,R5,R6,R7);

  [rentry + semid*2] = -1;
  //sus
  //[rentry + semid*2+1] = -1;
  [[PTBR + (uptr-1)*2/512]*512 + (uptr-1)%512] = 0;
endif;

//reset mode
[centry + 9] =0;
//Switch stacks
SP = [centry + 13];
ireturn;
