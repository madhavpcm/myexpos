// Ex Handler
//show process is in exhandler
alias uptr R5;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = -1;
// switch kernel stacks
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP; 
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1] * 16 + 11]*512 -1;

backup;
//Save faulting IP to redo it;
multipush(EIP);

//- EIP: Logical value of IP of faulting instruction
//- EPN: For page fault, (stores logical page no)
//- EC: Exception Cause
//- - Pagefault, Illegal Instruction, Illegal memory ,Arithmetic
//- EMA: for illegal memory access
uptr = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];
if( EC != 0) then
  breakpoint;
  if( EC == 1) then
    print "Ex.Inst";
  endif;
  if( EC == 2) then
      print "Ex.Mem";
  endif;
  if( EC == 3) then
    print "Ex.Zero";
  endif;
  if(uptr == 512*PTLR - 1) then
    print "Ex.Stack";
  endif; 
  
  // Kill process
  breakpoint;
  R1=EXIT_PROCESS;
  R2=[SYSTEM_STATUS_TABLE+1];
  call PROCESS_MANAGER;

  print "not PF";
  call SCHEDULER;
else

  if( EPN == 2 || EPN == 3)then 
  multipush(EPN) ;
    R1= GET_FREE_PAGE;
    call MEMORY_MANAGER;
    [PTBR + 4] = R0;
    [PTBR + 5] = "1110";

  multipop(EPN) ;
  multipush(EPN) ;
    R1= GET_FREE_PAGE;
    call MEMORY_MANAGER;
    [PTBR + 6] = R0;
    [PTBR + 7] = "1110";
    print "PFheap";
  multipop(EPN) ;


  endif;

  if( EPN >= 4 && EPN <= 7 )then

  multipush(EPN);
    R1 = GET_CODE_PAGE;
    R2 = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1] * 10 + EPN];
    call MEMORY_MANAGER;
  multipop(EPN);
    [PTBR + EPN*2] = R0;
    [PTBR + EPN*2 + 1] = "1100";

    print "PFcode";
  endif;
endif;


[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 +9 ] = 0;

multipop(EIP);
restore;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] + 1; 
[[PTBR + SP*2/512]*512 + SP % 512] = EIP;
// goto user mode but not the next IP
breakpoint;
ireturn;
