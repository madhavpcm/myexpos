//Login Syscall
alias cpid R1;
alias centry R2;
alias uptr R3;
alias syscall R4;
alias ret R5;

cpid=[SYSTEM_STATUS_TABLE + 1];
centry = PROCESS_TABLE + cpid*16;

//Switch Stacks
[centry + 13] = SP;
uptr = SP;
SP = [centry + 11]*512 -1;

ret =[PTBR +(uptr-1)*2/512]*512 + (uptr-1)%512 ;

//Extract Syscall
syscall = [[PTBR + (uptr-5)*2/512]*512 + (uptr-5)%512];

if(syscall == INT_NEWUSR) then
  alias ui R6;
  alias username R7;
  alias password R8;

  [centry + 9] = INT_NEWUSR;
  username = [[PTBR + (uptr-4)*2/512]*512 + (uptr-4)%512];
  password = [[PTBR + (uptr-3)*2/512]*512 + (uptr-3)%512];

  if([SYSTEM_STATUS_TABLE] != ROOT) then
    [ret] = -2;
    goto _return_;
  endif;

//if user already exists return -1
  ui=0;
  while(ui < MAX_USER_NUM)  do
    if([USER_TABLE + ui*2] == username) then
      [ret]= -1;
      goto _return_;
    endif;
    ui=ui+1;
  endwhile;
  
  //get a free entry in user table
  ui=0;
  while(ui < MAX_USER_NUM) do
    if([USER_TABLE + ui*2] == -1) then
      break;
    endif;
    ui=ui+1;
  endwhile;

  if(ui == MAX_USER_NUM) then
    [ret] = -3;
    goto _return_;
  endif;
  
  [USER_TABLE + ui*2] = username;
  encrypt R8;
  [USER_TABLE + ui*2+1] = password;

  [ret] = 0;
  goto _return_;
endif;

if(syscall == INT_REMUSR) then
  alias ui R6;
  alias username R7;
  alias ri R8;

  username = [[PTBR + (uptr-4)*2/512]*512 + (uptr-4)%512];

  if([SYSTEM_STATUS_TABLE] != ROOT) then
    [ret] = -2;
    goto _return_;
  endif;

  if(username == "root" || username == "kernel") then
    [ret] = -2;
    goto _return_;
  endif;

  ui=0;
  while(ui < MAX_USER_NUM) do
    if([USER_TABLE + ui*2] == username) then
      break;
    endif;
    ui=ui+1;
  endwhile;

  if(ui == MAX_USER_NUM) then
    [ret] = -1;
    goto _return_;
  endif;

  ri =0 ;
  while(ri < MAX_FILE_NUM)do 
    if([ROOT_FILE + ri*8 + 3] == [USER_TABLE + ui*2]) then
      [ret] = -3;
      goto _return_;
    endif;
    ri = ri+1;
  endwhile;

  [USER_TABLE + ui*2] = -1;
  [USER_TABLE + ui*2+1] = -1;
  [ret] = 0;
  goto _return_;

endif;

if(syscall == INT_SETPWD) then
  alias ui R6;
  alias username R7;
  alias password R8;

  [centry + 9] = INT_SETPWD;
  username = [[PTBR + (uptr-4)*2/512]*512 + (uptr-4)%512];
  password = [[PTBR + (uptr-3)*2/512]*512 + (uptr-3)%512];

  if(cpid != SHELL_PROCESS) then
    [ret] = -1;
    goto _return_;
  endif;
  
  ui=0;
  while(ui < MAX_USER_NUM) do 
    if([USER_TABLE + ui*2] == username) then
      break;
    endif;
    ui=ui+1;
  endwhile;

  if(ui == MAX_USER_NUM) then
    [ret] = -2;
    goto _return_;
  endif;

  if([centry + 3] != ui) then
    if([SYSTEM_STATUS_TABLE] != ROOT) then
      [ret] = -1;
      goto _return_;
    endif;
  endif;

  encrypt R8;
  [USER_TABLE + ui*2 + 1] = password;
  [ret] = 0;
  goto _return_;
endif;

if(syscall == INT_GETUID) then
  alias ui R6;
  alias username R7;
  [centry + 9] = INT_GETUID;

  username = [[PTBR + (uptr-4)*2/512]*512 + (uptr-4)%512];
  ui=0;
  while(ui < MAX_USER_NUM) do
    if([USER_TABLE + ui *2] == username)  then
      [ret] = ui;
      goto _return_;
    endif;
    ui=ui+1;
  endwhile;

  [ret] = -1;
  goto _return_;
endif;

if(syscall == INT_GETUNAME) then
  alias ui R6;
  [centry + 9] = INT_GETUNAME;

  ui= [[PTBR + (uptr-4)*2/512]*512 + (uptr-4)%512];

  if( ui < 0 || ui > 15) then
    [ret] = "-1";
    goto _return_;
  endif;

  if([USER_TABLE + ui*2] == -1) then
    [ret] = "-1";
    goto _return_;
  endif;

  [ret] = [USER_TABLE + ui*2];
  goto _return_;
endif;

_return_:
[centry + 9] =0;
SP=uptr;
ireturn;
