//Logout Syscall
alias cpid R1;
alias centry R2;
alias uptr R3;
alias syscall R4;
alias ret R5;


cpid=[SYSTEM_STATUS_TABLE+5*CORE + 1];
centry = PROCESS_TABLE + cpid*16;
  [centry + 9] = INT_LOGOUT;

//set logout status to true

//Switch Stacks
[centry + 13] = SP;
uptr = SP;
SP = [centry + 11]*512 -1;

ret =[PTBR +(uptr-1)*2/512]*512 + (uptr-1)%512 ;

if(cpid != SHELL_PROCESS) then
  [ret]= -1;
  [centry + 9] = 0;
  SP= uptr;
  ireturn;
endif;

//logout mode and shutdown core 1
[SYSTEM_STATUS_TABLE +7] = 1;
[centry+4] = READY;


call SCHEDULER;

multipush(R1,R2);
R1=ACQUIRE_KERN_LOCK;
call MOD_8;
multipop(R1,R2);
  multipush(R1,R2,R3,R4,R5);
    R1= KILL_ALL;
    R2= SHELL_PROCESS;
    call PROCESS_MANAGER;
  multipop(R1,R2,R3,R4,R5);

multipush(R1,R2);
R1=RELEASE_LOCK;
R2=KERN_LOCK;
call MOD_8;
multipop(R1,R2);

  // reset logout status
  [SYSTEM_STATUS_TABLE+7] = 0;
//terminate shell 
  [centry+4] = TERMINATED;

  //SP = [1]
  //
  alias sstack R6;
  alias scode R7;

//get stack and code pages
  sstack = [PAGE_TABLE_BASE + SHELL_PROCESS * 20 + 16];
  scode = [PAGE_TABLE_BASE + SHELL_PROCESS * 20 + 8];

  [PROCESS_TABLE + SHELL_PROCESS *16 + 13] = 8*512;

  //reset stack pointer to beginning of code page
  [sstack * 512] = [scode * 512 + 1];

  [PROCESS_TABLE + INIT_PROCESS*16 + 4] = READY;
  [SYSTEM_STATUS_TABLE] = KERNEL;

  call SCHEDULER;

