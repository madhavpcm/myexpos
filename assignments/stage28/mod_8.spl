alias funcno R1;

//Petersons Algorithm
//kernel lock
//29584 flag 0
//29585 flag 1
//29586 turn
//define KERN_FLAG 29584;
//define KERN_TURN 29586;
//
//define SCHED_FLAG 29587;
//define SCHED_TURN 29589;


if( funcno == ACQUIRE_KERN_LOCK ) then
  if([SYSTEM_STATUS_TABLE+5] == 1 || [SYSTEM_STATUS_TABLE+7] == 1) then
    if(CORE == SECONDARY_CORE) then
      [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+6] * 16 + 4] = READY;

      multipush(R1);
      call SCHEDULER;
      multipop(R1);
    endif;
  endif;

// i is the core we want to lock
  [KERN_FLAG+CORE] = 1; //flag[i] = true
// j = 1 - CORE
  [KERN_TURN] = (1-CORE);

  while([KERN_FLAG+(1-CORE)] == 1 && [KERN_TURN] == (1-CORE)) do
    continue;
  endwhile;
  // critical section
  return;
endif;

if(funcno == ACQUIRE_SCHED_LOCK) then
  [SCHED_FLAG+CORE] = 1; //flag[i] = true
// j = 1 - CORE
  [SCHED_TURN] = (1-CORE);

  while([SCHED_FLAG+(1-CORE)] == 1 && [SCHED_TURN] == (1-CORE)) do
    continue;
  endwhile;
  return;
endif;

if(funcno == ACQUIRE_GLOCK) then
  while(tsl(GLOCK) == 1) do
    continue;
  endwhile;
  return;
endif;

if(funcno == RELEASE_LOCK) then
  alias lockvaraddr R2;
  if(lockvaraddr == SCHED_LOCK) then
    [SCHED_FLAG + CORE] = 0;
  else
    [KERN_FLAG+ CORE] = 0;
  endif;
  return;
endif;
